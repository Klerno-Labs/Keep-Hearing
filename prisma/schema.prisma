// prisma/schema.prisma
// Save as UTF-8 (NO BOM). Use straight quotes only.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STAFF
  ADMIN
  SUPERADMIN
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String?
  image     String?
  password  String?
  role      Role       @default(STAFF)
  sessions  Session[]
  accounts  Account[]
  donations Donation[]
  auditLogs AuditLog[]
  deletedAt DateTime?  // Soft delete timestamp

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([deletedAt])
}

model Donation {
  id          String   @id @default(cuid())
  userId      String?
  amountCents Int
  currency    String   @default("USD")
  provider    String
  providerId  String
  recurring   Boolean  @default(false)
  createdAt   DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([userId])
  @@index([provider, providerId])
}

model Promo {
  id          String @id @default(cuid())
  slug        String @unique
  sponsor     String
  beneficiary String
  percentage  Int
  basis       String
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([userId, createdAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String?
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  // NextAuth-style uniqueness:
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String?
  expires      DateTime

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([userId])
  @@index([expires])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  // Primary key as a composite:
  @@id([identifier, token])
}

model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String
  status    String   @default("new") // new, read, archived
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([createdAt])
}
